<testlist>
	<import>res:/org/netkernel/xml/assert/assertLibrary.xml</import>





	<test name="POST /identifier?template=foobar">
		<request>
			<identifier>active:RESTAssured</identifier>
			<argument name="operator">res:/test/tests/identifier-template-foobar.gy</argument>
			<argument name="svcroot">active:iopsvc/root</argument>
			<representation>java.lang.String</representation>
		</request>
	</test>

	<test name="POST /identifier  (default template)">
		<request>
			<identifier>active:RESTAssured</identifier>
			<argument name="operator">res:/test/tests/identifier-no-template.gy</argument>
			<argument name="svcroot">active:iopsvc/root</argument>
			<representation>java.lang.String</representation>
		</request>
	</test>

	<!-- ToDo: need negative tests to check error responses (code doesn't parse the template yet) -->


	<test name="GET /iop/identifier/id/foo">
		<request>
			<identifier>active:RESTAssured</identifier>
			<argument name="operator"><literal type="string">
				import com.jayway.restassured.*;
				import com.jayway.restassured.config.*;
				//Assert content type matches
				given().header("Accept", "application/vnd.iop.meta.id+xml")
				.get("http://localhost:8080/iop/identifier/id/foo")
				.then().assertThat()
				.contentType("application/vnd.iop.meta.id+xml");

				/**Can't get this namespace stuff working yet...*/
				RestAssured.config.getXmlConfig().namespaceAware(true).declareNamespace("i", "http://ns.iop.org/namespaces/resources/meta/id");
				given()
				.header("Accept", "application/vnd.iop.meta.id+xml")
				.get("http://localhost:8080/iop/identifier/id/foo")
				.then().assertThat()
				//.body("'i:identifier-info'.i:system.i:created.text()", equalTo("2014-01-13T22:39:30Z"));
				//.body(hasXPath("/i:identifier-info/i:system/i:created", new NSContext()) );

				//Just get it as a string and return as test response for extrinsic xunit asserts.
				s=given()
				.header("Accept", "application/vnd.iop.meta.id+xml")
				.get("http://localhost:8080/iop/identifier/id/foo").asString();
				context.createResponseFrom(s)

				//Attempt to stub out the namespace context - being called but still fails hasXPath()
				class NSContext implements javax.xml.namespace.NamespaceContext
				{	public String getNamespaceURI(String prefix)
				{	println("BEEN CALLED 1: $prefix");
				return "http://ns.iop.org/namespaces/resources/meta/id";
				}
				public String getPrefix(String namespaceURI)
				{	println("BEEN CALLED 2");
				return "i";
				}
				public Iterator getPrefixes(String namespaceURI)
				{	return null;
				}
				}
			</literal>
			</argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<xpath>/i:identifier-info/i:system/i:created</xpath>
		</assert>
	</test>
	<test name="PUT /iop/identifier/id/foo">
		<request>
			<identifier>active:httpPut</identifier>
			<argument name="url">http://localhost:8080/iop/identifier/id/foo</argument>
			<argument name="body"><i:annotation  xmlns:i="http://ns.iop.org/namespaces/resources/meta/id"/></argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<xpath>/i:annotation</xpath>
		</assert>
	</test>
	<test name="DELETE /iop/identifier/id/foo">
		<request>
			<identifier>active:httpDelete</identifier>
			<argument name="url">http://localhost:8080/iop/identifier/id/foo</argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<stringEquals>DELETE id: foo</stringEquals>
		</assert>
	</test>
	<test name="POST /iop/identifier/version/id/foo">
		<request>
			<identifier>active:httpPost</identifier>
			<argument name="url">http://localhost:8080/iop/identifier/version/foo?template=baa</argument>
			<argument name="body"><i:annotation  xmlns:i="http://ns.iop.org/namespaces/resources/meta/id"/></argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<stringEquals>id: foo template: baa</stringEquals>
		</assert>
	</test>
	<test name="GET /iop/identifier/extern/foo">
		<request>
			<identifier>active:httpGet</identifier>
			<argument name="url">http://localhost:8080/iop/identifier/extern/foo</argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<stringEquals>id: foo</stringEquals>
		</assert>
	</test>
	<test name="GET /iop/identifier/intern/foo">
		<request>
			<identifier>active:httpGet</identifier>
			<argument name="url">http://localhost:8080/iop/identifier/intern/foo</argument>
			<representation>java.lang.String</representation>
		</request>
		<assert>
			<notNull/>
			<stringEquals>url: foo</stringEquals>
		</assert>
	</test>
</testlist>
