import com.jayway.restassured.config.RestAssuredConfig
import org.netkernel.layer0.nkf.INKFRequestContext
import javax.xml.namespace.NamespaceContext

INKFRequestContext context = context

// The list of namespaces is defined in the REST Assured XML config resource
RestAssuredConfig config = context.source ("active:idsvc-ra-xml-config", RestAssuredConfig.class)

SimpleNamespaceContext namespaces = new SimpleNamespaceContext()

// Copy the namespace declarations from the XML config, add to the NS context object
config.xmlConfig.declaredNamespaces() each { ns ->
	namespaces.withBinding (ns.getKey(), ns.getValue())
}

context.createResponseFrom (namespaces)


// -------------------------------------------------------------------------
// The following class is defined in the package org.xmlmatchers.namespace,
// which is part of the Hamcrest stuff, but doesn't seem to be a part of
// the NK distribution of REST Assured.  Reproducing it here out of laziness.

/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import javax.xml.XMLConstants;
//import javax.xml.namespace.NamespaceContext

/**
 * A simple, mutable {@link NamespaceContext} implementation.
 *
 * @author David Ehringer
 *
 */
public class SimpleNamespaceContext implements NamespaceContext {

  private Map<String, String> prefixToNamespaceUri = new HashMap<String, String>();

  // Always access through the getPrefixesSafely method
  private Map<String, List<String>> namespaceUriToPrefixes = new HashMap<String, List<String>>();

  private String defaultNamespaceUri = "";

  public String getNamespaceURI(String prefix) {
    if (XMLConstants.XML_NS_PREFIX.equals(prefix)) {
      return XMLConstants.XML_NS_URI;
    } else if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {
      return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    } else if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {
      return defaultNamespaceUri;
    } else if (prefixToNamespaceUri.containsKey(prefix)) {
      return prefixToNamespaceUri.get(prefix);
    }
    return "";
  }

  public String getPrefix(String namespaceURI) {
    List<String> prefixes = getPrefixesSafely(namespaceURI);
    if (prefixes.size() == 0) {
      return null;
    }
    return prefixes.get(0);
  }

  @SuppressWarnings("rawtypes")
  public Iterator getPrefixes(String namespaceURI) {
    return getPrefixesSafely(namespaceURI).iterator();
  }

  private List<String> getPrefixesSafely(String namespaceURI) {
    List<String> prefixes = namespaceUriToPrefixes.get(namespaceURI);
    if (prefixes == null) {
      prefixes = new ArrayList<String>();
      namespaceUriToPrefixes.put(namespaceURI, prefixes);
    }
    return prefixes;
  }

  public static SimpleNamespaceContext aNamespaceContext() {
    return new SimpleNamespaceContext ();
  }

  public void bind(String prefix, String namespaceURI) {
    prefixToNamespaceUri.put(prefix, namespaceURI);
    getPrefixesSafely(namespaceURI).add(prefix);
  }

  public void setBindings(Map<String, String> bindings) {
    for (Map.Entry<String, String> entry : bindings.entrySet()) {
      bind(entry.getKey(), entry.getValue());
    }
  }

  /**
   * A fluent interface for adding bindings.
   *
   * @return
   */
  public SimpleNamespaceContext withBinding(String prefix, String namespaceURI) {
    bind(prefix, namespaceURI);
    return this;
  }

  @Override
  String toString ()
  {
    StringBuilder sb = new StringBuilder();
    sb.append ("NamespaceConxtext {\n");
    for (Map.Entry<String, String> entry : prefixToNamespaceUri.entrySet().iterator()) {
      sb.append ("    ").append (entry.key).append (": ").append (entry.value).append ("\n")
    }
    sb.append ("}");
  }
}

