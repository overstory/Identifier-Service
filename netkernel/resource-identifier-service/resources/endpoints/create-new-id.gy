import org.netkernel.client.http.representation.HttpClientResponseRepresentation
import org.netkernel.layer0.nkf.INKFAsyncRequestListener
import org.netkernel.layer0.nkf.INKFRequest
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.INKFResponse
import org.netkernel.layer0.nkf.INKFResponseReadOnly
import org.netkernel.layer0.nkf.NKFException

try {
	INKFRequestContext context = context

	String templateArg = (context.exists ("arg:template")) ? "?template=${context.source ("arg:template")}" : ''
	String body = (context.exists ("arg:body")) ? context.source ("arg:body", String.class) : ''
	String mimetype = context.source ("arg:mimetype")
	String url = context.source ("arg:url")
	String urlPath = url.replaceFirst ('http://([-a-zA-Z0-9]+)(:[0-9]+)', '')
	String svcPrefix = urlPath.replaceFirst ('/identifier', '')

	req = context.createRequest ("active:httpAsyncPost")
	req.addArgument ("url", context.source ("active:ml/fullurl/identifier${templateArg}", String.class))
	req.addArgument ("config", "res:/resources/http-call/http-config.xml")
	req.addArgumentByValue ("state", context.source ("active:httpState/managed"))
	req.addArgumentByValue ("body", body)
	req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);  //We're going to take control of the caching at this level so ignore lower dependencies
	if (mimetype != null) {
		req.addArgumentByValue ("headers", "<hds><Content-Type>${mimetype}</Content-Type></hds>".toString ())
	}
	req.setRepresentationClass (HttpClientResponseRepresentation.class);

	//Issue the request asynchronously and release this thread back to do work
	handle = context.issueAsyncRequest (req)

	//Finally set listener and return this thread
	handle.setListener (new CompletedPostListener (svcPrefix))
	context.setNoResponse ()
} catch (e) {
	e.printStackTrace ()
	throw e
}

class CompletedPostListener implements INKFAsyncRequestListener
{
	def String svcPrefix

	CompletedPostListener (String svcPrefix)
	{
		this.svcPrefix = svcPrefix
	}

	def void receiveException (NKFException aException, INKFRequest aRequest, INKFRequestContext context)
	{
		context.createResponseFrom (aException);
	}

	static def void copyHeaderToOuter (INKFResponse response, HttpClientResponseRepresentation hcrr, String headerName, String prefix)
	{
		String value = (hcrr.getHeader (headerName) == null) ? "" : hcrr.getHeader (headerName)

		response.setHeader ("httpResponse:/header/${headerName}", "${prefix}${value}".toString())
	}

	static def void copyHeaderToOuter (INKFResponse response, HttpClientResponseRepresentation hcrr, String headerName)
	{
		copyHeaderToOuter (response, hcrr, headerName, "")
	}

	//Receive the client request's response and pass through the relevant pieces.
	def void receiveResponse (INKFResponseReadOnly resp, INKFRequestContext context)
	{
		HttpClientResponseRepresentation hcrr = resp.getRepresentation () as HttpClientResponseRepresentation
		def response = context.createResponseFrom (hcrr.getEntity())

		response.setMimeType (hcrr.getHeader ("Content-Type"))
		response.setHeader ("httpResponse:/code", hcrr.getResponseCode ())
		copyHeaderToOuter (response, hcrr, "Location", svcPrefix)
		copyHeaderToOuter (response, hcrr, "X-URI")
		copyHeaderToOuter (response, hcrr, "ETag")
		copyHeaderToOuter (response, hcrr, "Content-Type")
		response.setHeader ("httpResponse:/header/Server", "")
	}
}
