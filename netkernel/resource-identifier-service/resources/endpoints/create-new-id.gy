import org.netkernel.client.http.representation.HttpClientResponseRepresentation
import org.netkernel.layer0.nkf.INKFAsyncRequestListener
import org.netkernel.layer0.nkf.INKFRequest
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.INKFResponse
import org.netkernel.layer0.nkf.INKFResponseReadOnly
import org.netkernel.layer0.nkf.NKFException
import org.netkernel.layer0.representation.IHDSNode

INKFRequestContext context = context

try {
	String templateArg = (context.exists ("arg:template")) ? "?template=${context.source ("arg:template")}" : ''
	String body = (context.exists ("arg:body")) ? context.source ("arg:body", String.class) : ''
	String mimetype = context.source ("arg:mimetype")
	String url = context.source ("arg:url")
	String urlPath = url.replaceFirst ('http://([-a-zA-Z0-9]+)(:[0-9]+)', '')
	String svcPrefix = urlPath.replaceFirst ('/identifier', '')

	INKFRequest req = context.createRequest ('active:httpAsync')
	req.addArgumentByValue ("method", 'POST')
	req.addArgument ("url", context.source ("active:ml/fullurl/identifier${templateArg}", String.class))
	req.addArgumentByValue ("body", body)
	req.addArgument ("config", "arg:config")
	req.addArgument ("credentials", "arg:credentials")
	req.addArgumentByValue ("callback", new CompletedPostListener (svcPrefix))
	if (mimetype != null) {
		req.addArgumentByValue ("headers", "<hds><Content-Type>${mimetype}</Content-Type></hds>".toString())
	}
	req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);  //We're going to take control of the caching at this level so ignore lower dependencies

	context.issueAsyncRequest (req).setListener (context.source ("active:httpAsync/passthru-listener", INKFAsyncRequestListener.class))
	context.setNoResponse()
} catch (e) {
	e.printStackTrace()
	throw e
}

def class CompletedPostListener implements INKFAsyncRequestListener
{
	String svcPrefix

	CompletedPostListener (String svcPrefix)
	{
		this.svcPrefix = svcPrefix
	}

	def void receiveException (NKFException aException, INKFRequest aRequest, INKFRequestContext context)
	{
		context.createResponseFrom (aException);
	}

	def void receiveResponse (INKFResponseReadOnly resp, INKFRequestContext context)
	{
		HttpClientResponseRepresentation hcrr = resp.getRepresentation() as HttpClientResponseRepresentation

		List<String> dontCopyHeaders = [ "content-length", "server", "connection", "keep-alive", "location" ]
		INKFResponse response = context.createResponseFrom (hcrr.getEntity())
		response.setMimeType (hcrr.getHeader ("content-type"))
		response.setHeader ("httpResponse:/code", hcrr.getResponseCode())

		hcrr.getImplementingHDS().getNodes("//httpHeaders/*").each { IHDSNode node ->
			String name = node.getName()
			if ( ! dontCopyHeaders.contains (name.toLowerCase())) {
				response.setHeader ("httpResponse:/header/${ name }".toString(), node.getValue())
			}
		}

		// ToDo: Figure out how to factor this into the generic httpAsync client
		response.setHeader ("httpResponse:/header/Location", "${svcPrefix}${hcrr.getHeader ('location')}".toString())
	}
}
