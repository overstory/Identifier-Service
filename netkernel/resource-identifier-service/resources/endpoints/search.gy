import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.*

import org.netkernel.client.http.representation.HttpClientResponseRepresentation
import org.netkernel.layer0.representation.IHDSNode

INKFRequestContext context = context

try {
	String accept = context.source ("httpRequest:/accept/preferred")
	String url = context.source ("arg:url")
	String queryString = (context.source ("arg:queryString") == null) ? "" : "?${context.source ('arg:queryString')}".toString ()
	String config = context.getThisRequest ().getArgumentValue ("config")
	String credentials = context.getThisRequest ().getArgumentValue ("credentials")

	req = context.createRequest ('active:httpAsync')
	req.addArgumentByValue ("method", 'GET')
	req.addArgument ("url", context.source ("active:ml/fullurl/identifier${queryString}".toString (), String.class))
	req.addArgument ("config", "arg:config")
	req.addArgument ("credentials", "arg:credentials")
	req.addArgumentByValue ("headers", "<hds><Accept>application/vnd.overstory.meta.id.brief+xml</Accept></hds>")
	req.addArgumentByValue ("callback", new CompletedListener (url, queryString, accept, config, credentials))
	req.setHeader (INKFRequest.HEADER_EXCLUDE_DEPENDENCIES, true);  //We're going to take control of the caching at this level so ignore lower dependencies

	context.issueAsyncRequest (req).setListener (context.source ("active:httpAsync/passthru-listener", INKFAsyncRequestListener.class))
	context.setNoResponse ()
} catch (e) {
	e.printStackTrace ()
	throw e
}

// ----------------------------------------------------------

class CompletedListener implements INKFAsyncRequestListener
{
	String url
	String queryString
	String accept
	String config
	String credentials

	CompletedListener (String url, String queryString, String accept, config, credentials)
	{
		this.accept = accept;
		this.config = config;
		this.credentials = credentials;
		this.url = url
		this.queryString = queryString
	}

	def void receiveException (NKFException aException, INKFRequest aRequest, INKFRequestContext context)
	{
		context.createResponseFrom (aException);
	}

	def void receiveResponse (INKFResponseReadOnly resp, INKFRequestContext context)
	{
		HttpClientResponseRepresentation hcrr = resp.getRepresentation () as HttpClientResponseRepresentation

		if (hcrr.getResponseCode () == 200) {
			INKFRequest req = context.createRequest ("active:xslt2")
			req.addArgumentByValue ("operand", hcrr.getEntity ())
			req.addArgument ("operator", "res:/resources/xslt/search-to-atom-xrl.xsl")
			req.addArgumentByValue ("url", url)
			req.addArgumentByValue ("queryString", queryString)
			req.addArgumentByValue ("config", config)
			req.addArgumentByValue ("credentials", credentials)
			def rep = context.issueRequest (req)

			req = context.createRequest ("active:xrl2")
			req.addArgumentByValue ("template", rep)
			rep = context.issueRequest (req)

			INKFResponse response

			if (accept.equals ("application/json")) {
				req = context.createRequest ("active:JSONFromXML")
				req.addArgumentByValue ("operand", rep)
				rep = context.issueRequest (req)

				response = context.createResponseFrom (rep)
				response.setMimeType ("application/json")
			} else {
				response = context.createResponseFrom (rep)
				response.setMimeType (hcrr.getHeader ("content-type"))
			}

			response.setHeader ("httpResponse:/code", hcrr.getResponseCode ())
			response.setHeader ("httpResponse:/header/ETag", hcrr.getHeader ("etag"))
			response.setHeader ("httpResponse:/header/Last-Modified", hcrr.getHeader ("last-modified"))
		} else {
			List<String> dontCopyHeaders = ["content-length", "server", "connection", "keep-alive"]
			INKFResponse response = context.createResponseFrom (hcrr.getEntity ())
			response.setMimeType (hcrr.getHeader ("content-type"))
			response.setHeader ("httpResponse:/code", hcrr.getResponseCode ())

			hcrr.getImplementingHDS ().getNodes ("//httpHeaders/*").each { IHDSNode node ->
				String name = node.getName ()
				if (!dontCopyHeaders.contains (name.toLowerCase ())) {
					response.setHeader ("httpResponse:/header/${name}".toString (), node.getValue ())
				}
			}
		}
	}
}

