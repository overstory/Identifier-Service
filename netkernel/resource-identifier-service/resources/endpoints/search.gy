
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.*

import org.netkernel.client.http.representation.HttpClientResponseRepresentation


try {

	INKFRequestContext context = context

	req = context.createRequest ("active:httpAsyncGet")
	req.addArgument ("url", context.source ("active:ml/fullurl/identifier", String.class))
	req.addArgument ("config", "res:/resources/http-call/http-config.xml")
	req.addArgumentByValue ("state", context.source("active:httpState/managed"))
	req.addArgumentByValue ("headers", "<hds><Accept>application/vnd.overstory.meta.id.brief+xml</Accept></hds>")
	req.setRepresentationClass (HttpClientResponseRepresentation.class);

	//Issue the request asynchronously and release this thread back to do work
	context.issueAsyncRequest(req).setListener(new CompletedListener())
	context.setNoResponse()
} catch (e) {
	e.printStackTrace()
	throw e
}

class CompletedListener implements INKFAsyncRequestListener
{
	def void receiveException (NKFException aException, INKFRequest aRequest, INKFRequestContext context)
	{
		context.createResponseFrom(aException);
	}

	//Receive the client request's response and pass through the relevant pieces.
	def void receiveResponse (INKFResponseReadOnly resp, INKFRequestContext context)
	{
println ("SEARCH: async callback")
		HttpClientResponseRepresentation hcrr = resp.getRepresentation() as HttpClientResponseRepresentation

		// ToDo: Need to check HTTP response code in hcrr and take error path if not 200

		def req = context.createRequest ("active:xslt")
		req.addArgumentByValue ("operand", hcrr.getEntity())
		req.addArgument ("operator", "res:/resources/xslt/transformSearchForXRL.xsl")
		def rep = context.issueRequest(req)

println ("back from xslt: " + rep)

		req = context.createRequest ("active:xrl2")
		req.addArgumentByValue ("template", rep)
		rep = context.issueRequest(req)
println ("back from xrl")

		def responseOuter = context.createResponseFrom (rep)
		responseOuter.setMimeType (hcrr.getHeader ("content-type"))
		//responseOuter.setMimeType ("text/xml")
		responseOuter.setHeader ("httpResponse:/code", hcrr.getResponseCode())
		responseOuter.setHeader ("httpResponse:/header/Content-Type", hcrr.getHeader("content-type"))
		responseOuter.setHeader ("httpResponse:/header/ETag", hcrr.getHeader ("etag"))
println ("done")
	}
}

