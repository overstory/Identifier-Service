import org.netkernel.client.http.representation.HttpClientResponseRepresentation
import org.netkernel.layer0.nkf.INKFAsyncRequestListener
import org.netkernel.layer0.nkf.INKFRequest
import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.nkf.INKFResponse
import org.netkernel.layer0.nkf.INKFResponseReadOnly
import org.netkernel.layer0.nkf.NKFException

INKFRequestContext context = context

try {
	String accept = context.source ("arg:content-type")
	String id = context.getThisRequest().getArgumentValue ("id")

	req = context.createRequest ('active:httpAsync')
	req.addArgumentByValue ("method", 'GET')
	req.addArgument ("url", context.source ("active:ml/fullurl/identifier/id/${id}", String.class))
	req.addArgument ("config", "arg:config")
	req.addArgument ("credentials", "arg:credentials")
	req.addArgumentByValue ("headers", "<hds><Accept>application/vnd.overstory.meta.id+xml</Accept></hds>")
	req.addArgument ("golden-thread", id)
	req.addArgumentByValue ("callback", new CompletedListener (accept))

	context.issueAsyncRequest (req).setListener (context.source ("active:httpAsync/passthru-listener", INKFAsyncRequestListener.class))
	context.setNoResponse()
} catch (e) {
	e.printStackTrace ()
	throw e
}

class CompletedListener implements INKFAsyncRequestListener
{
	String accept

	def public CompletedListener (String accept)
	{
		this.accept = accept
	}

	def void receiveException (NKFException aException, INKFRequest aRequest, INKFRequestContext context)
	{
		context.createResponseFrom (aException);
	}

	def void receiveResponse (INKFResponseReadOnly resp, INKFRequestContext context)
	{
		HttpClientResponseRepresentation hcrr = resp.getRepresentation () as HttpClientResponseRepresentation
		INKFResponse response

		if (accept.equals ("application/json")) {
			req = context.createRequest ("active:JSONFromXML")
			req.addArgumentByValue ("operand", hcrr.getEntity())

			response = context.createResponseFrom (context.issueRequest (req))
			response.setMimeType ("application/json")
		} else {
			response = context.createResponseFrom (hcrr.getEntity())
			response.setMimeType (hcrr.getHeader ("content-type"))
		}

		response.setHeader ("httpResponse:/code", hcrr.getResponseCode ())
		response.setHeader ("httpResponse:/header/ETag", hcrr.getHeader ("etag"))
		response.setHeader ("httpResponse:/header/Last-Modified", hcrr.getHeader ("last-modified"))
	}
}


